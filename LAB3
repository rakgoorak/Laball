String header = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";

String html_1 = R"=====(
<!DOCTYPE html>
<html>
 <head>
  <meta name='viewport' content='width=device-width, initial-scale=1.0'/>
  <meta charset='utf-8'>
  <style>
    body {font-size:100%;} 
    #main {display: flex; flex-direction: column; margin:0 auto;  padding: 10px 10px 10px 10px; } 
    #content { padding: 10px 0px 10px 0px;}
    h1 {text-align:center; margin: 10px 0px 10px 0px;} 
    h2 {text-align:center; margin: 10px 0px 10px 0px;} 
    p { text-align:center; margin: 5px 0px 10px 0px; font-size: 120%;}
    #led{width: 150px; height: 150px; border-radius: 100%; margin: 0 auto;}
  </style>

  <script> 
    function updateTime() 
    {  
       var d = new Date();
       var t = "";
    }

    function updateTemp() 
    {  
       ajaxLoad("getTemp"); 
    }

    var ajaxRequest = null;
    if (window.XMLHttpRequest)  { ajaxRequest =new XMLHttpRequest(); }
    else                        { ajaxRequest =new ActiveXObject("Microsoft.XMLHTTP"); }

    function ajaxLoad(ajaxURL)
    {
      if(!ajaxRequest){ alert("AJAX is not supported."); return; }

      ajaxRequest.open("GET",ajaxURL,true);
      ajaxRequest.onreadystatechange = function()
      {
        if(ajaxRequest.readyState == 4 && ajaxRequest.status==200)
        {
          var ajaxResult = ajaxRequest.responseText;
          var tmpArray = ajaxResult.split("|");
          document.getElementById("temp_C").innerHTML = tmpArray[0];
          document.getElementById("hmd").innerHTML = tmpArray[1];
          document.getElementById("vdc").innerHTML = tmpArray[2];
          document.getElementById("state").innerHTML = tmpArray[3];

          if (tmpArray[3] == "on") {
            document.getElementById("led").style.background = "red";
          } else {
            document.getElementById("led").style.background = "black";
          }
          
        }
      }
      ajaxRequest.send();
    }

    function onClickLED() {
     var state = document.getElementById('state').innerHTML;
     if (state == "on") {
      state = "off";
     } else {
      state = "on"
     }
     var xhr = new XMLHttpRequest();
     xhr.open("GET", "/" + state, true);
     xhr.send();
   }

    var myVar1 = setInterval(updateTemp, 5000);  
    var myVar2 = setInterval(updateTime, 1000);  

  </script>


  <title>Temperature & Humidy Monitor</title>
 </head>

 <body>

   <div id= "main">
     <div id= "content"> 
     <h1>ESP8266 Web Server</h1>
     <div id= "led"></div>
      <p>State is : <span id="state"></span></p>
      <p>
        <a href="/on"><button class="button">ON</button></a>
        <a href="/off"><button class="button  ">OFF</button></a>
      </p>
       <h2>Temperature</h2>
       <p> <span id= "temp_C">--.-</span> &deg;C &nbsp;-&nbsp;
       <h2>Humidity</h2>
       <p> <span id= "hmd">--</span> % </p>
       <h2>VDC</h2>
       <p> <span id= "vdc">--</span> V </p>
     </div>
   </div> 
 </body>
</html>
)====="; 

#include <ESP8266WiFi.h>
#include "DHT.h"
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#define OLED_RESET -1
Adafruit_SSD1306 OLED(OLED_RESET);
#define DHTPIN  D5
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE, 15);

// change these values to match your network
char ssid[] = "RAK";       //  your network SSID (name)
char pass[] = "12345678";          //  your network password

const int sw = D4;
const int led = D0;
int count = 0;
  
float tempC = 0;
float humid = 0;
float vdc = 0;

WiFiServer server(80);
String request = "";

String outputState = "off"; 
void setup() 
{
    pinMode(sw, INPUT);
    pinMode(led, OUTPUT);
    OLED.begin(SSD1306_SWITCHCAPVCC, 0x3C);//int OLED
    Serial.begin(115200);
    Serial.println();
    Serial.println("Serial started at 115200");
    Serial.println();
    OLED.clearDisplay();
    dht.begin();

    // Connect to a WiFi network
    Serial.print(F("Connecting to "));  Serial.println(ssid);
    WiFi.begin(ssid, pass);

    while (WiFi.status() != WL_CONNECTED) 
    {
        Serial.print(".");
        delay(500);
    }
    Serial.println("");
    Serial.println(F("[CONNECTED]"));
    Serial.print("[IP ");              
    Serial.print(WiFi.localIP()); 
    Serial.println("]");

    // start a server
    server.begin();
    Serial.println("Server started");

}


void loop() 
{  
    if (digitalRead(sw) == 0) {
            while (digitalRead(sw) == 0);
            delay(250);
            count++;
          }
          if (count == 1) {
           digitalWrite(led, HIGH);
           outputState = "on";
         } else {
           digitalWrite(led, LOW);
           outputState = "off";
           count = 0;
          }
  
    WiFiClient client = server.available();     // Check if a client has connected
    if (!client)  {  return;  }

    request = client.readStringUntil('\r');     // Read the first line of the request

    Serial.println(request);
    Serial.println("");

    if (request.indexOf("GET /on") >= 0) {
    outputState = "on";
    count = 1;
    digitalWrite(led, HIGH);
    } else if (request.indexOf("GET /off") >= 0) {
    outputState = "off";
    count = 0;
    digitalWrite(led, LOW);
    }

    if ( request.indexOf("getTemp") > 0 )
     { 
          Serial.println("getTemp received");

          // Reading temperature or humidity takes about 250 milliseconds!
          // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
          humid = dht.readHumidity();
          tempC = dht.readTemperature();        // Read temperature as Celsius (the default)
          vdc = analogRead(A0) * 3.3 / 1023; 
          
          if ( !isnan(humid) && !isnan(tempC))
          {
              displayOLED(tempC, humid, vdc);
              client.print( header );
              client.print( tempC );   client.print( "|" );  client.print( humid ); client.print( "|" ); client.print(vdc); client.print( "|" ); client.print(outputState);
              Serial.println("data sent");
          }
          else
          {
              Serial.println("Error reading the sensor");
          }
     }
     else
     {
        client.flush();
        client.print( header );
        client.print( html_1 ); 
        Serial.println("New page served");
     }

    delay(5);
  // The client will actually be disconnected when the function returns and the 'client' object is destroyed
} 


void displayOLED(float t, float h, float vdc) {
  OLED.clearDisplay();
  OLED.setTextColor(WHITE);
  OLED.setCursor(0, 0);
  OLED.setTextSize(2);
  OLED.println(String("T:") + String(t, 0) + "C");
  OLED.setCursor(0, 20);
  OLED.print(String("H:") + String(h, 0) + " %");
  OLED.setCursor(0, 40);
  OLED.print("ADC: " + String(vdc, 1) + " V");
  OLED.display();
  delay(100);

}